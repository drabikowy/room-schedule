// Generated by CoffeeScript 1.7.1
(function() {
  var ProgressBar, after, create_readstream, get_filesize, njs_fs;

  njs_fs = require('fs');


  /* https://github.com/visionmedia/node-progress */

  ProgressBar = require('progress');

  after = function(time_s, f) {
    return setTimeout(f, time_s * 1000);
  };

  module.exports = create_readstream = function(route, label) {

    /* Create and return a new instance of a read stream form a single route or a list of routes. In the
    latter case, a combined stream using https://github.com/felixge/node-combined-stream is constructed
    so that several files (that are presumable the result of an earlier split operation that was done to
    reduce individual file sizes) transparently like one huge single file.
    
    As a bonus, the module uses https://github.com/visionmedia/node-progress to display a progress bar
    for reading operations that last for more than a couple seconds.
    
     * As a second bonus, the module uses CoffeeNode's `TRM.listen_to_keys` method to implement a `ctrl-C,
     * ctrl-C`-style abort shortcut with an informative message displayed when `ctrl-C` has been hit by the user
     * once; this is to prevent longish read operations to be inadvertantly terminated.
     */
    var CombinedStream, R, bar, bar_is_shown, collected_bytes, format, is_first_call, options, partial_route, routes, size, timer, type, _i, _len;
    switch (type = TYPES.type_of(route)) {
      case 'text':
        R = njs_fs.createReadStream(route);
        break;
      case 'list':
        routes = route;

        /* https://github.com/felixge/node-combined-stream */
        CombinedStream = require('combined-stream');
        R = CombinedStream.create();
        for (_i = 0, _len = routes.length; _i < _len; _i++) {
          partial_route = routes[_i];
          R.append(njs_fs.createReadStream(partial_route));
        }
        break;
      default:
        throw new Error("unable to create readstream for argument of type " + (rpr(type)));
    }
    size = get_filesize(route);
    collected_bytes = 0;
    bar_is_shown = false;
    is_first_call = true;
    format = "[:bar] :percent | :current / " + size + " | +:elapseds -:etas " + label;
    options = {
      width: 50,
      total: size,
      complete: '#',
      incomplete: 'â€”'
    };
    R.on('data', function(data) {
      collected_bytes += data.length;
      if (bar_is_shown) {
        bar.tick(is_first_call ? collected_bytes : data.length);
        return is_first_call = false;
      }
    });
    bar = new ProgressBar(format, options);
    timer = after(3, function() {
      return bar_is_shown = true;
    });
    R.on('end', function() {
      return clearTimeout(timer);
    });
    return R;
  };

  get_filesize = function(route) {
    var R, partial_route, _i, _len;
    if (!Array.isArray(route)) {
      return (njs_fs.statSync(route)).size;
    }
    R = 0;
    for (_i = 0, _len = route.length; _i < _len; _i++) {
      partial_route = route[_i];
      R += get_filesize(partial_route);
    }
    return R;
  };

}).call(this);
